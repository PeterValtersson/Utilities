
#ifndef _OBJ_PARSER_H_
#define _OBJ_PARSER_H_

#include <vector>
#include <ArfData.h>
#include "scanner.h"

// autogenerated by Bison
#include "parser.tab.h"


namespace ObjParser {


#define ALLOC_ALL 0
#define ALLOC_POSITION 1
#define ALLOC_TECCOORD 2
#define ALLOC_NORMAL 3
#define ALLOC_FACE 4
#define ALLOC_SUB_MESH 5
#define ALLOC_SHRINK_TO_FIT 6

#define GENERATE_ARF_FLAG_NONE 0
#define GENERATE_ARF_FLAG_SHRINK_TO_FIT 1

	class Interpreter
	{
	public:
		Interpreter();
		~Interpreter();
		/**
		 * Run parser.
		 * \returns 0 on success, 1 on failure
		 */
		int parse(std::istream *is);


		void clear();
		ArfData::ArfData* data;

		void Alloc(int flag);
		void* GetData()
		{
			if (parsed)
			{
				auto t = data;
				data = nullptr;
				parsed = false;
				return t;
			}
				
			return nullptr;
		}

		std::string str() const;

		friend class Parser;
		friend class Scanner;

		const std::string& GetError()const
		{
			return error;
		}
	private:
		std::istream * stream;
		std::string error;
		void PutError(const std::string& message)
		{
			error = message;
		}
		bool parsed;
		void AddPosition(const ArfData::Position& pos);
		void AddTexCoord(const ArfData::TexCoord& tex);
		void AddNormal(const ArfData::Normal& norm);
		void AddFace(const ArfData::Face& face);
		void AddSubMesh(const string& name);

		// Used internally by Scanner YY_USER_ACTION to update location indicator
		void increaseLocation(unsigned int loc);
		void increaseRow()
		{
			_row++;
		}
		uint32_t _row;
		// Used to get last Scanner location. Used in error messages.
		unsigned int location() const;
		char errorCharacter()
		{			
			stream->seekg(-2, std::ios::cur);
			char c;
			*stream >> c;
			return c;
		}
		uint32_t row()const
		{
			return _row;
		}
	private:
		Scanner _scanner;
		Parser _parser;
		unsigned int m_location;          // Used by scanner
	};

}

#endif // INTERPRETER_H
